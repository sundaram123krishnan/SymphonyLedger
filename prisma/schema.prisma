// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  artistProfile Artist?
  sessions      Session[]
  accounts      Account[]
  Playlist      Playlist[]
  SongListen    SongListen[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Artist {
  user            User    @relation(fields: [userId], references: [id])
  metamaskAddress String  @id
  userId          String  @unique
  songs           Song[]
  Album           Album[]
}

model Song {
  artist                Artist       @relation(fields: [artistMetamaskAddress], references: [metamaskAddress])
  artistMetamaskAddress String
  likes                 Int
  dislikes              Int
  songIpfs              String       @id
  metaIpfs              String
  playlist              Playlist?    @relation(fields: [playlistPlaylistId], references: [playlistId])
  playlistPlaylistId    Int?
  Album                 Album?       @relation(fields: [albumAlbumId], references: [albumId])
  albumAlbumId          Int?
  SongListen            SongListen[]
}

model Album {
  artist                Artist @relation(fields: [artistMetamaskAddress], references: [metamaskAddress])
  artistMetamaskAddress String
  songs                 Song[]
  name                  String
  albumId               Int    @id @default(autoincrement())
}

model Playlist {
  creator     User   @relation(fields: [userId], references: [id])
  songs       Song[]
  userId      String
  playlistId  Int    @id @default(autoincrement())
  name        String
  description String
}

model SongListen {
  song         Song     @relation(fields: [songIpfs], references: [songIpfs])
  songIpfs     String
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  listenNumber Int      @id @default(autoincrement())
  listenedAt   DateTime @default(now())
  lat          Float
  lng          Float
}
